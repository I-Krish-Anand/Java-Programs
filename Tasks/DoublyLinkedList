class Node
{
    private int data;
    private Node next,prev;
    Node()
    {}
    private Node(int data)
    {
        this.data=data;
        next=null;
        prev=null;
    }
    private Node head,tail;
    private int size;
    public void add(int data)
    {
        Node temp=new Node(data);
        if(head==null)
            head = temp;
        else {
            tail.next = temp;
            temp.prev = tail;
        }
        tail=temp;
        size++;
    }
    public void add(int index,int data) throws SizeOutOfRange
    {
        if(index>size)
            throw new SizeOutOfRange();
        Node temp=new Node(data);
        Node bwd=null,curr=head;
        int curIndex=0;
        while (curIndex++<index)
        {
            bwd=curr;
            curr=curr.next;
        }
        if(bwd==null)
            head=temp;
        else {
            bwd.next = temp;
            temp.prev = bwd;
        }
        if(curr==null)
            tail=temp;
        else {
            temp.next = curr;
            curr.prev = temp;
        }
        size++;
    }
    public void delete()
    {
        Node temp=head;
        while (temp.next!=tail)
            temp=temp.next;
        temp.next=null;
        tail=temp;
        size--;
    }
    public void delete(int index)throws SizeOutOfRange
    {
        if(index>=size)
            throw new SizeOutOfRange();
        Node bwd=null,cur=head,fwd=head.next;
        int curIndex=0;
        while (curIndex++<index)
        {
            bwd=cur;
            cur=fwd;
            fwd=fwd.next;
        }
        if(cur==head) {
            head = head.next;
            head.prev = null;
        }
        else if(cur==tail)
        {
            tail=tail.prev;
            tail.next=null;
        }
        else {
            bwd.next = fwd;
            fwd.prev = bwd;
        }
        size--;
    }
    public void display()
    {
        Node iter=head;
        while (iter!=null) {
            System.out.print(iter.data+" ");
            iter = iter.next;
        }
        System.out.println();

    }
    public void reverse()
    {
        Node iter=tail;
        while (iter!=null) {
            System.out.print(iter.data+" ");
            iter = iter.prev;
        }
        System.out.println();

    }
}


